import { useQuery } from "@tanstack/vue-query";
import { defineStore } from "pinia";
import { computed, ref } from "vue";

import { ecwidApi } from "@/api";
import type { EcwidCategory } from "@/api/categories.types";

export const useCategoriesStore = defineStore(
  "categories",
  () => {
    const categories = ref<EcwidCategory[]>([]);

    const { refetch: refetchCategories, isLoading: categoriesLoading } = useQuery({
      queryKey: ["categories"],
      queryFn: async () => {
        const response = await ecwidApi.category.list({
          withSubcategories: true,
          limit: 100,
        });
        categories.value = response.data.items;
        return response.data;
      },
    });

    // Parent categories with subcategories
    const hierarchicalCategories = computed<(EcwidCategory & { subCategories: EcwidCategory[] })[]>(
      () => {
        return categories.value
          .filter((category) => !category.parentId)
          .map((category) => {
            return {
              ...category,
              subCategories: categories.value.filter((c) => c.parentId === category.id),
            };
          });
      },
    );

    // Get category by slug
    const getCategoryBySlug = (slug: string) => {
      return categories.value.find((category) =>
        [category.customSlug, category.autogeneratedSlug].includes(slug),
      );
    };

    // Get category parents
    const getCategoryParents = (categoryId: number) => {
      const parents: EcwidCategory[] = [];
      let currentCategory = categories.value.find((c) => c.id === categoryId)!;
      while (currentCategory.parentId) {
        currentCategory = categories.value.find((c) => c.id === currentCategory.parentId)!;
        parents.push(currentCategory);
      }
      return parents.reverse();
    };

    return {
      categories,
      refetchCategories,
      categoriesLoading,
      hierarchicalCategories,
      getCategoryBySlug,
      getCategoryParents,
    };
  },
  {
    persist: true,
  },
);
